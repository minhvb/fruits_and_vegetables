<?php

namespace App\Tests\App;

use App\Tests\Helpers\Truncator;
use Doctrine\DBAL\Exception;
use Symfony\Bundle\FrameworkBundle\KernelBrowser;
use Symfony\Bundle\FrameworkBundle\Test\WebTestCase;
use Doctrine\DBAL\Connection;

class ApiTest extends WebTestCase
{
    private readonly KernelBrowser $client;

    /**
     * @throws Exception
     */
    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->client = static::createClient();
        self::bootKernel();

        /** @var Connection $connection */
        $connection = $this->getContainer()->get(Connection::class);
        $truncator = new Truncator($connection);
        $truncator->truncateTable('fruits');
        $truncator->truncateTable('vegetables');

        parent::setUp();
    }

    public function testAddFruit(): void
    {
        $data = [
            'name' => 'Banana',
            'type' => 'fruit',
            'quantity' => 500,
        ];
        $this->createItem($data);

        $this->assertEquals(200, $this->client->getResponse()->getStatusCode());
        $response = json_decode($this->client->getResponse()->getContent(), true);
        $this->assertEquals('Banana', $response['name']);
        $this->assertEquals(500, $response['quantity']);
    }

    public function testAddFruitWithInvalidQuantity(): void
    {
        $data = [
            'name' => 'Banana',
            'type' => 'fruit',
            'quantity' => -1,
        ];
        $this->createItem($data);

        $this->assertEquals(500, $this->client->getResponse()->getStatusCode());
        $response = json_decode($this->client->getResponse()->getContent(), true);
        $this->assertEquals('{"quantity":["This value should be positive."]}', $response['message']);
    }

    public function testAddVegetable(): void
    {
        $data = [
            'name' => 'Carrot',
            'type' => 'vegetable',
            'quantity' => 100,
        ];
        $this->createItem($data);

        $this->assertEquals(200, $this->client->getResponse()->getStatusCode());
        $response = json_decode($this->client->getResponse()->getContent(), true);
        $this->assertEquals('Carrot', $response['name']);
        $this->assertEquals(100, $response['quantity']);
    }

    public function testAddVegetableWithInvalidQuantity(): void
    {
        $data = [
            'name' => 'Carrot',
            'type' => 'vegetable',
            'quantity' => -1,
        ];
        $this->createItem($data);

        $this->assertEquals(500, $this->client->getResponse()->getStatusCode());
        $response = json_decode($this->client->getResponse()->getContent(), true);
        $this->assertEquals('{"quantity":["This value should be positive."]}', $response['message']);
    }

    public function testListFruits(): void
    {
        $fruitData = [
            'name' => 'Banana',
            'type' => 'fruit',
            'quantity' => 500,
        ];
        $this->createItem($fruitData);

        $this->client->request('GET', '/items/list', ['type' => 'fruit', 'unit' => 'gram']);
        $this->assertEquals(200, $this->client->getResponse()->getStatusCode());
        $response = json_decode($this->client->getResponse()->getContent(), true);
        $this->assertGreaterThan(0, count($response));
        $this->assertArrayHasKey('name', $response[0]);
        $this->assertArrayHasKey('quantity', $response[0]);

        $this->assertEquals('Banana', $response[0]['name']);
        $this->assertEquals(500, $response[0]['quantity']);
    }

    public function testListFruitsWithUnitKilogram(): void
    {
        $fruitData = [
            'name' => 'Banana',
            'type' => 'fruit',
            'quantity' => 500,
        ];
        $this->createItem($fruitData);

        $this->client->request('GET', '/items/list', ['type' => 'fruit', 'unit' => 'kilogram']);
        $this->assertEquals(200, $this->client->getResponse()->getStatusCode());
        $response = json_decode($this->client->getResponse()->getContent(), true);
        $this->assertGreaterThan(0, count($response));
        $this->assertArrayHasKey('name', $response[0]);
        $this->assertArrayHasKey('quantity', $response[0]);

        $this->assertEquals('Banana', $response[0]['name']);
        $this->assertEquals(0.5, $response[0]['quantity']);
    }

    public function testListVegetable(): void
    {
        $data = [
            'name' => 'Carrot',
            'type' => 'vegetable',
            'quantity' => 100,
        ];
        $this->createItem($data);

        $this->client->request('GET', '/items/list', ['type' => 'vegetable', 'unit' => 'gram']);
        $this->assertEquals(200, $this->client->getResponse()->getStatusCode());
        $response = json_decode($this->client->getResponse()->getContent(), true);
        $this->assertGreaterThan(0, count($response));
        $this->assertArrayHasKey('name', $response[0]);
        $this->assertArrayHasKey('quantity', $response[0]);

        $this->assertEquals('Carrot', $response[0]['name']);
        $this->assertEquals(100, $response[0]['quantity']);
    }

    public function testListVegetablesWithUnitKilogram(): void
    {
        $fruitData = [
            'name' => 'Carrot',
            'type' => 'vegetable',
            'quantity' => 5000,
        ];
        $this->createItem($fruitData);

        $this->client->request('GET', '/items/list', ['type' => 'vegetable', 'unit' => 'kilogram']);
        $this->assertEquals(200, $this->client->getResponse()->getStatusCode());
        $response = json_decode($this->client->getResponse()->getContent(), true);
        $this->assertGreaterThan(0, count($response));
        $this->assertArrayHasKey('name', $response[0]);
        $this->assertArrayHasKey('quantity', $response[0]);

        $this->assertEquals('Carrot', $response[0]['name']);
        $this->assertEquals(5, $response[0]['quantity']);
    }

    public function testSearchFruit(): void
    {
        $data = [
            'name' => 'Apple',
            'type' => 'fruit',
            'quantity' => 100,
        ];
        $this->createItem($data);

        $data = [
            'name' => 'Orange',
            'type' => 'fruit',
            'quantity' => 20,
        ];
        $this->createItem($data);

        $this->client->request('GET', '/items/search', ['type' => 'fruit', 'name' => 'ang']);
        $this->assertEquals(200, $this->client->getResponse()->getStatusCode());
        $response = json_decode($this->client->getResponse()->getContent(), true);
        $this->assertCount(1, $response);
        $this->assertArrayHasKey('name', $response[0]);
        $this->assertArrayHasKey('quantity', $response[0]);

        $this->assertEquals('Orange', $response[0]['name']);
        $this->assertEquals(20, $response[0]['quantity']);
    }

    public function testSearchVegetable(): void
    {
        $data = [
            'name' => 'Carrot',
            'type' => 'vegetable',
            'quantity' => 100,
        ];
        $this->createItem($data);

        $data = [
            'name' => 'Tomatoes',
            'type' => 'vegetable',
            'quantity' => 20,
        ];
        $this->createItem($data);

        $this->client->request('GET', '/items/search', ['type' => 'vegetable', 'name' => 'Toma']);
        $this->assertEquals(200, $this->client->getResponse()->getStatusCode());
        $response = json_decode($this->client->getResponse()->getContent(), true);
        $this->assertCount(1, $response);
        $this->assertArrayHasKey('name', $response[0]);
        $this->assertArrayHasKey('quantity', $response[0]);

        $this->assertEquals('Tomatoes', $response[0]['name']);
        $this->assertEquals(20, $response[0]['quantity']);
    }

    private function createItem(array $data): void
    {
        $this->client->request(
            'POST',
            '/items/add',
            [],
            [],
            ['CONTENT_TYPE' => 'application/json'],
            json_encode($data)
        );
    }
}
